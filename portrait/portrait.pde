///////////////////////////////////////////////////////////////////////////////
// File: portrait.pde                 Fall 2013
// Author: Patrick Vargas             patrick.vargas@colorado.edu
// Professor Harriman, Digital Media 2, University of Colorado Boulder
// Description:
//   Employing everything you we have learned so far, develop an interactive 
//   conceptual selfÂ­-portrait.
//   * Include at least one function from the reference library that we have 
//     not yet covered.
//   * Make this conceptual: be creative with your interpretation of a 
//     "self-portrait"
//   * Be sure to add comments to your code including your name, the name of 
//     the assignment, and the date at the top.
//   * You may not import any imagery. All graphics must be created within
//     Processing.
//   * Post your lab to your DM2 Portfolio on redwood: 
//     http://redwood.colorado.edu/username/dm2/lab1
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Class to make Dots
class Dot {
  // Member variables
  boolean b;
  int x, y, r;
  color c1, c2, c3;
 
  // Constructor
  Dot( int px, int py, int pr, color pc1, color pc2, color pc3 ) {
    x = px; y = py; r = pr; c1 = pc1; c2 = pc2; c3 = pc3; b = false;
  }

  // Member Methods
  void draw ( ) {
    if ( flag1 && !flag2 ) {
      if ( !b ) fill( c1 );
      else      fill( c2 );
    }
    else if ( flag2 && !flag3 ) {
      if ( !b ) fill( c2 );
      else      fill( c3 );      
    }
    else if ( flag3 ) {
      if ( !b ) fill( c3 );
      else      fill( 255, 255, 255, 100 );
    }
    else {
      if ( !b ) fill( 255, 255, 255, 100 );
      else      fill( c1 );
    }

    ellipse( x, y, r, r );
  }
  
  // Function to calculate distance between two points
  int distance ( int a, int b ) {
    return (int) sqrt( pow(x - a, 2) + pow(y - b, 2) ); 
  }

}
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Global Variables
ArrayList<Dot> flag;
boolean flag1, flag2, flag3;
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Initalize function
void setup( ) {
  // Variables
  color temp;
  
  // Set up window
  size( 600, 600 );
  
  // Instantiate flag array
  flag = new ArrayList<Dot>( );
  flag1 = flag2 = flag3 = false;
  
  for ( int x = 25; x < width; x += 25 ) {
    for ( int y = 25; y < height; y += 25 ) {
      flag.add( new Dot( x, y, 25,
                         coFlag( ( x/25 ) - 1, ( y/25 ) - 1 ),
                         bearFlag( ( x/25 ) - 1, ( y/25 ) - 1 ), 
                         gayFlag( ( x/25 ) - 1, ( y/25 ) - 1 )
                       )
              );
    }
  }
}
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Looped drawing function
void draw( ) {
  // Variables
  Dot temp;
  int count;

  // Color the background
  background( 0 );
  noStroke( );
  
  // Initalize counter to test if design is complete
  count = 0;
  
  // Grab each dot and draw on the screen
  for ( int i = 0; i < flag.size( ); ++i ) {
    temp = flag.get( i );
    if ( temp.distance( mouseX, mouseY ) < 25 ) {
      temp.r = 75;
      temp.b = true;
    }
    else if ( temp.distance( mouseX, mouseY ) < 50 )
      temp.r = 50;
    else temp.r = 25;

    if ( temp.b ) count++;
    
    temp.draw( );
    flag.set( i, temp );
  }

  // Check if design is complete and move onto the next
  if ( count == flag.size( ) ) {
    if ( !flag1 && !flag2 )              flag1 = true;
    else if ( flag1 && !flag2 )          flag2 = true;
    else if ( flag1 && flag2 && !flag3 ) flag3 = true;
    else if ( flag1 && flag2 && flag3 )  flag1 = flag2 = flag3 = false;
    
    for ( int i = 0; i < flag.size( ); ++i ) {
      temp = flag.get( i );
      temp.b = false;
      flag.set( i, temp );
    }  
  }
}
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Colors of the Bear Flag
color bearFlag ( int x, int y ) { 
  color temp = color( 0, 0, 0, 200 );
  
  int[ ][ ] colors = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 6, 6, 0, 0, 6, 6, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 6, 6, 0, 0, 6, 6, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 1, 1, 1, 1, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 1, 6, 6, 1, 6, 6, 6, 6, 6, 6, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 2, 6, 6, 2, 6, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 6, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 6, 6, 2, 6, 6, 6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 3, 6, 6, 3, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },
    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },
    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 },
    { 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6 }
  };
  
  switch ( colors [ y ][ x ] ) {
    case 0: temp = color(  89,  58,  16, 200 ); break; // brown
    case 1: temp = color( 188,  99,  24, 200 ); break; // orange
    case 2: temp = color( 245, 220, 108, 200 ); break; // yellow
    case 3: temp = color( 247, 230, 184, 200 ); break; // tan
    case 4: temp = color( 255, 255, 255, 200 ); break; // white
    case 5: temp = color(  86,  86,  86, 200 ); break; // gray
    case 6: temp = color(   0,   0,   0, 200 ); break; // black
  }

  return temp;
}
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Colors of the Gay Flag
color gayFlag ( int x, int y ) { 
  color temp = color( 0, 0, 0, 200 );
  
  int[ ][ ] colors = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
    { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },
    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },
    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },
    { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
    { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 }
  };
  
  switch ( colors [ y ][ x ] ) {
    case 0: temp = color( 255, 0, 86, 200 ); break; // Red
    case 1: temp = color( 255, 142, 0, 200 ); break; // Orange
    case 2: temp = color( 255, 229, 0, 200 ); break; // Yellow
    case 3: temp = color( 124, 255, 0, 200 ); break; // Green
    case 4: temp = color( 0, 155, 255, 200 ); break; // Blue
    case 5: temp = color( 103, 0, 255, 200 ); break; // Purple
  }

  return temp;
}
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Colors of the Colorado Flag
color coFlag ( int x, int y ) { 
  color temp = color( 0, 0, 0, 200 );
  
  int[ ][ ] colors = {
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2 },
    { 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 },
    { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 }
  };
  
  switch ( colors [ y ][ x ] ) {
    case 0: temp = color( 255,   0,  86, 200 ); break; // Red
    case 1: temp = color( 255, 229,   0, 200 ); break; // Yellow
    case 2: temp = color( 255, 255, 255, 200 ); break; // White
    case 3: temp = color(   0, 155, 255, 200 ); break; // Blue
  }

  return temp;
}
///////////////////////////////////////////////////////////////////////////////

